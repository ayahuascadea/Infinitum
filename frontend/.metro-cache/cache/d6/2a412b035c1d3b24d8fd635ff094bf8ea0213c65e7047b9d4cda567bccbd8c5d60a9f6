{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":33,"column":32,"index":1233}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":33,"column":32,"index":1233}}],"key":"jM/HC84YZkM9kLoiCo0Bpf0Xr+w="}},{"name":"react-native-web/dist/exports/UIManager","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":33,"column":32,"index":1233}}],"key":"mt60bUPNyZJxXQOkCYxrge0hF24="}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use client';\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.enableFreeze = enableFreeze;\n  exports.enableScreens = enableScreens;\n  exports.freezeEnabled = freezeEnabled;\n  exports.isNativePlatformSupported = void 0;\n  exports.screensEnabled = screensEnabled;\n  exports.shouldUseActivityState = void 0;\n  var _Platform = _interopRequireDefault(require(_dependencyMap[1], \"react-native-web/dist/exports/Platform\"));\n  var _UIManager = _interopRequireDefault(require(_dependencyMap[2], \"react-native-web/dist/exports/UIManager\"));\n  // const that tells if the library should use new implementation, will be undefined for older versions\n  const shouldUseActivityState = exports.shouldUseActivityState = true;\n  const isNativePlatformSupported = exports.isNativePlatformSupported = _Platform.default.OS === 'ios' || _Platform.default.OS === 'android' || _Platform.default.OS === 'windows';\n  let ENABLE_SCREENS = isNativePlatformSupported;\n  function enableScreens() {\n    let shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    ENABLE_SCREENS = shouldEnableScreens;\n    if (!isNativePlatformSupported) {\n      return;\n    }\n    if (ENABLE_SCREENS && !_UIManager.default.getViewManagerConfig('RNSScreen')) {\n      console.error(`Screen native module hasn't been linked. Please check the react-native-screens README for more details`);\n    }\n  }\n  let ENABLE_FREEZE = false;\n  function enableFreeze() {\n    let shouldEnableReactFreeze = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (!isNativePlatformSupported) {\n      return;\n    }\n    ENABLE_FREEZE = shouldEnableReactFreeze;\n  }\n  function screensEnabled() {\n    return ENABLE_SCREENS;\n  }\n  function freezeEnabled() {\n    return ENABLE_FREEZE;\n  }\n});","lineCount":44,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"enableFreeze"],[8,22,1,13],[8,25,1,13,"enableFreeze"],[8,37,1,13],[9,2,1,13,"exports"],[9,9,1,13],[9,10,1,13,"enableScreens"],[9,23,1,13],[9,26,1,13,"enableScreens"],[9,39,1,13],[10,2,1,13,"exports"],[10,9,1,13],[10,10,1,13,"freezeEnabled"],[10,23,1,13],[10,26,1,13,"freezeEnabled"],[10,39,1,13],[11,2,1,13,"exports"],[11,9,1,13],[11,10,1,13,"isNativePlatformSupported"],[11,35,1,13],[12,2,1,13,"exports"],[12,9,1,13],[12,10,1,13,"screensEnabled"],[12,24,1,13],[12,27,1,13,"screensEnabled"],[12,41,1,13],[13,2,1,13,"exports"],[13,9,1,13],[13,10,1,13,"shouldUseActivityState"],[13,32,1,13],[14,2,1,13],[14,6,1,13,"_Platform"],[14,15,1,13],[14,18,1,13,"_interopRequireDefault"],[14,40,1,13],[14,41,1,13,"require"],[14,48,1,13],[14,49,1,13,"_dependencyMap"],[14,63,1,13],[15,2,1,13],[15,6,1,13,"_UIManager"],[15,16,1,13],[15,19,1,13,"_interopRequireDefault"],[15,41,1,13],[15,42,1,13,"require"],[15,49,1,13],[15,50,1,13,"_dependencyMap"],[15,64,1,13],[16,2,5,0],[17,2,6,7],[17,8,6,13,"shouldUseActivityState"],[17,30,6,35],[17,33,6,35,"exports"],[17,40,6,35],[17,41,6,35,"shouldUseActivityState"],[17,63,6,35],[17,66,6,38],[17,70,6,42],[18,2,7,7],[18,8,7,13,"isNativePlatformSupported"],[18,33,7,38],[18,36,7,38,"exports"],[18,43,7,38],[18,44,7,38,"isNativePlatformSupported"],[18,69,7,38],[18,72,7,41,"Platform"],[18,89,7,49],[18,90,7,50,"OS"],[18,92,7,52],[18,97,7,57],[18,102,7,62],[18,106,7,66,"Platform"],[18,123,7,74],[18,124,7,75,"OS"],[18,126,7,77],[18,131,7,82],[18,140,7,91],[18,144,7,95,"Platform"],[18,161,7,103],[18,162,7,104,"OS"],[18,164,7,106],[18,169,7,111],[18,178,7,120],[19,2,8,0],[19,6,8,4,"ENABLE_SCREENS"],[19,20,8,18],[19,23,8,21,"isNativePlatformSupported"],[19,48,8,46],[20,2,9,7],[20,11,9,16,"enableScreens"],[20,24,9,29,"enableScreens"],[20,25,9,29],[20,27,9,32],[21,4,10,2],[21,8,10,6,"shouldEnableScreens"],[21,27,10,25],[21,30,10,28,"arguments"],[21,39,10,37],[21,40,10,38,"length"],[21,46,10,44],[21,49,10,47],[21,50,10,48],[21,54,10,52,"arguments"],[21,63,10,61],[21,64,10,62],[21,65,10,63],[21,66,10,64],[21,71,10,69,"undefined"],[21,80,10,78],[21,83,10,81,"arguments"],[21,92,10,90],[21,93,10,91],[21,94,10,92],[21,95,10,93],[21,98,10,96],[21,102,10,100],[22,4,11,2,"ENABLE_SCREENS"],[22,18,11,16],[22,21,11,19,"shouldEnableScreens"],[22,40,11,38],[23,4,12,2],[23,8,12,6],[23,9,12,7,"isNativePlatformSupported"],[23,34,12,32],[23,36,12,34],[24,6,13,4],[25,4,14,2],[26,4,15,2],[26,8,15,6,"ENABLE_SCREENS"],[26,22,15,20],[26,26,15,24],[26,27,15,25,"UIManager"],[26,45,15,34],[26,46,15,35,"getViewManagerConfig"],[26,66,15,55],[26,67,15,56],[26,78,15,67],[26,79,15,68],[26,81,15,70],[27,6,16,4,"console"],[27,13,16,11],[27,14,16,12,"error"],[27,19,16,17],[27,20,16,18],[27,124,16,122],[27,125,16,123],[28,4,17,2],[29,2,18,0],[30,2,19,0],[30,6,19,4,"ENABLE_FREEZE"],[30,19,19,17],[30,22,19,20],[30,27,19,25],[31,2,20,7],[31,11,20,16,"enableFreeze"],[31,23,20,28,"enableFreeze"],[31,24,20,28],[31,26,20,31],[32,4,21,2],[32,8,21,6,"shouldEnableReactFreeze"],[32,31,21,29],[32,34,21,32,"arguments"],[32,43,21,41],[32,44,21,42,"length"],[32,50,21,48],[32,53,21,51],[32,54,21,52],[32,58,21,56,"arguments"],[32,67,21,65],[32,68,21,66],[32,69,21,67],[32,70,21,68],[32,75,21,73,"undefined"],[32,84,21,82],[32,87,21,85,"arguments"],[32,96,21,94],[32,97,21,95],[32,98,21,96],[32,99,21,97],[32,102,21,100],[32,106,21,104],[33,4,22,2],[33,8,22,6],[33,9,22,7,"isNativePlatformSupported"],[33,34,22,32],[33,36,22,34],[34,6,23,4],[35,4,24,2],[36,4,25,2,"ENABLE_FREEZE"],[36,17,25,15],[36,20,25,18,"shouldEnableReactFreeze"],[36,43,25,41],[37,2,26,0],[38,2,27,7],[38,11,27,16,"screensEnabled"],[38,25,27,30,"screensEnabled"],[38,26,27,30],[38,28,27,33],[39,4,28,2],[39,11,28,9,"ENABLE_SCREENS"],[39,25,28,23],[40,2,29,0],[41,2,30,7],[41,11,30,16,"freezeEnabled"],[41,24,30,29,"freezeEnabled"],[41,25,30,29],[41,27,30,32],[42,4,31,2],[42,11,31,9,"ENABLE_FREEZE"],[42,24,31,22],[43,2,32,0],[44,0,32,1],[44,3]],"functionMap":{"names":["<global>","enableScreens","enableFreeze","screensEnabled","freezeEnabled"],"mappings":"AAA;OCQ;CDS;OEE;CFM;OGC;CHE;OIC;CJE"}},"type":"js/module"}]}