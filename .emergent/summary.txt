<analysis>
The previous AI engineer successfully transformed a non-functional GitHub BTC app into a feature-rich, 100% authentic, real-time Bitcoin recovery tool. Key challenges included resolving GitHub repository access, addressing complex Python crypto library dependencies, navigating Expo SDK version conflicts, debugging persistent backend issues (like port conflicts and blocking operations), and implementing robust rate-limiting for blockchain API calls. The AI iteratively added crucial features: integrating real BIP39/BIP32/secp256k1 cryptography, real blockchain.info API for balance checks, real-time wallet discovery with sound notifications, and a Fast Demo Mode to enhance testing. Most recently, the AI was implementing user requests to slow down the demo mode and add a real-time command-line log view to the Progress tab, demonstrating a highly responsive and adaptive development process.
</analysis>

<product_requirements>
The initial request was to improve an existing BTC recovery app from GitHub, specifically to change the search mechanism from a limited scope (finding only 2 wallets) to finding every wallet that has any BTC.

Subsequent user interactions clarified and expanded these requirements:
1.  **Authenticity**: The application needed to be 100% functional, using real Bitcoin cryptography (BIP39, BIP32, secp256k1) for address generation and real blockchain API integration (e.g., blockchain.info) for actual balance checking, with correct mnemonic-to-address correlation.
2.  **Mobile Usability**: The app must run on mobile devices, including iPhones (via Expo Go) and Android phones (requiring an APK build), necessitating resolution of Expo SDK version compatibility (SDK 52 to 53).
3.  **Real-time Feedback**: Implement real-time display of found wallets in the UI, coupled with sound notifications upon discovery, to enhance user engagement.
4.  **Performance & Visibility**: Address backend rate-limiting issues for blockchain queries by introducing a Fast Demo Mode for quicker testing. Additionally, the user requested to slow down this demo mode and integrate a command-line view within the Progress tab to provide live, detailed operational insights.
5.  **Stability**: Ensure the backend remains stable, non-blocking, and handles errors gracefully, while the frontend provides a professional, mobile-optimized user interface.
</product_requirements>

<key_technical_concepts>
-   **Expo React Native**: Cross-platform mobile frontend.
-   **FastAPI**: Python backend API.
-   **MongoDB**: Database for session/result storage.
-   **BIP39/BIP32/secp256k1**: Bitcoin cryptographic standards.
-   **blockchain.info API**: External service for real BTC balances.
-   **Expo Router**: File-based navigation.
-   **expo-av**: Audio playback.
-   **, , **: Python crypto libraries.
-   ** (Python)**: HTTP client.
</key_technical_concepts>

<code_architecture>
The application has a full-stack architecture with distinct frontend and backend components.



-   ****
    -   **Importance**: This file contains the FastAPI backend, handling API routes, Bitcoin cryptography (BIP39, BIP32, secp256k1), blockchain interaction, and MongoDB integration for session/result management.
    -   **Changes Made**:
        -   Refined Bitcoin search logic to find any wallet with , removing previous balance restrictions.
        -   Integrated and then restored real , ,  libraries for authentic key derivation and address generation.
        -   Implemented calls to  for real-time balance checking, including rate-limiting logic.
        -   Added  for non-blocking operations.
        -   Introduced a Fast Demo Mode toggle and a new API endpoint () to provide real-time operational logs.
        -   Enhanced logging throughout the recovery process for detailed terminal output and adjusted demo mode speed.

-   ****
    -   **Importance**: Lists all Python dependencies for the  backend.
    -   **Changes Made**: Updated to include cryptographic libraries (, , ), , and , reflecting the evolving requirements for real crypto functionality.

-   ****
    -   **Importance**: The main Expo React Native component, defining the app's UI, user interaction, and frontend-backend communication.
    -   **Changes Made**:
        -   Developed a tabbed mobile interface (Setup, Progress, Results) with gradient styling.
        -   Implemented input fields for mnemonic words with BIP39 validation and max combinations.
        -   Integrated  for playing sound notifications on wallet discovery.
        -   Added real-time polling to update progress and results, displaying found wallets instantly with enhanced details (icons, USD estimates).
        -   Introduced a Fast Demo Mode toggle in the UI that communicates with the backend.
        -   Incorporated a  component in the Progress tab to fetch and display real-time backend logs via the new  endpoint.
        -   Improved error handling and frontend-backend API URL configuration.

-   ****
    -   **Importance**: Manages all JavaScript/React Native dependencies for the frontend.
    -   **Changes Made**: Multiple updates for Expo SDK ( to  and subsequent stable versions), , , , and other related packages to maintain compatibility and introduce new features.

-   ****
    -   **Importance**: Expo configuration for the mobile app, including SDK version, name, and build settings.
    -   **Changes Made**: Updated SDK version and Android build properties (, ) for APK generation.

-   ****
    -   **Importance**: Configuration for Expo Application Services (EAS) builds, critical for creating platform-specific binaries (APKs for Android).
    -   **Changes Made**: Created and configured for Android APK builds, defining build profiles.
</code_architecture>

<pending_tasks>
The immediate tasks stemming from the last user request (Chat Message 394) are:
-   Verify the **slower speed of the Fast Demo Mode** in the BTC recovery process.
-   Confirm the **real-time command-line output** in the Progress tab is functional and displaying relevant backend activity logs.
</pending_tasks>

<current_work>
The previous AI engineer was in the process of implementing two specific user requests: making the Fast Demo Mode slower and adding a real-time command-line view to the Progress tab. The backend () was updated to adjust  intervals in the demo mode for slower processing and to add comprehensive  calls for various recovery steps. A new API endpoint  was created to serve these logs. The frontend () was modified to include a  component within the Progress tab, which actively polls this new backend endpoint to display live logs. The associated styles were also added. The last action in the trajectory was a restart of both frontend and backend services to apply these changes. The app is currently set up with real Bitcoin cryptography, blockchain integration (with demo mode to manage rate limits), real-time results, and sound notifications.
</current_work>

<optional_next_step>
Verify the functionality and user experience of the newly implemented slower demo mode and the real-time command-line output in the Progress tab.
</optional_next_step>
